Promises are a ES6 substitute for Callbacks. It's a better way to work with asynchronous JavaScript.

Promises are an specific JavaScript object, with it's own methods and properties. 
You can think of it like a real promise that you do, and as any promises, they can be resolved (you kept the promise), or rejected (you didn't kept your promise).

This is useful, let's say, for fetching data from the server: If you fetch, and everything went fine, your promise is resolved (and when is resolved, you can do something). Else, you return an error, and can show that error on the console (for example).

-----------------------------------------------------------------------------------------------------------------------------

Syntax:

//you normally don't assign promises to a variable, you just return the promise (from the function)... but that's just an example

let myPromise = new Promise((resolve, reject)=>{     
  if(promiseKept){
  resolve();  //goes to then();
  }
  else{
  reject();   //goes to catch();
  }
})

myPromise.then().catch();

------------------------------

Ok, so lets see what happened:

- Your promise took a callback function as an argument, and that function took (resolve, reject) as arguments too.
- If the function called "resolve()", "then()" will run. If the function called "reject()", "catch()" will run.
- You will always run just one resolve or one reject, but not both.

-----------------------------------------------------------------------------------------------------------------------------

Another example:

function fetchArray(){
  return new Promise((resolve, reject)=>{
    fetchArrayFromServer(); //fictional function to asynch example.
    if(fetchIsOkay === true){
      resolve('Fetch went fine!');
    }
    else{
      reject('Ooops, something went wrong!');
    }
  });
}

fetchArray()
          .then(message => console.log(message))
          .catch(message => console.log(message));
         
------------------------------

Ok, so lets see what happened:

- You created a function, that returns a promise right away. Inside that promise, there's your callback function with resolve and reject (and inside the promise is where everything will happen - even the array fetch).
- You are fetching an array from a server, so it's asynchronous - you don't know how long it will take.
- You see that you can pass arguments throught the "resolve(message)" and "reject(message)", and that message can be manipulated later on using "then()" and "catch()". Anything that you pass throught the resolve will be an argument in the "then/catch".
- In the then/catch, I created an anonymous function. But you can assign another function inside there, and that's how promises are going to be used most-likely. If you resolved your promise - everything went fine - you can do something else. Else, you can show the error on the console.

-----------------------------------------------------------------------------------------------------------------------------

You can use just "then()" (even for rejects) if you set 2 arguments.
Example:

randomFunction()
            .then(resolveStuff, rejectStuff); 
//the first argument is going to be called in a resolve, and the second argument is going to be called in a reject - just like "catch()". But is a better pratice to use "then()/catch()" - is easier to read.



-----------------------------------------------------------------------------------------------------------------------------

More resources:

https://javascript.info/promise-basics                   //*gold*
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
https://www.youtube.com/watch?v=2d7s3spWAzo
https://www.youtube.com/watch?v=QO4NXhWo_NM
https://www.youtube.com/watch?v=AwyoVjVXnLk

