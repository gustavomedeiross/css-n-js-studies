Async Await is a new type of function to work with Promises and asynchronous programming. It's a feature from ES8 (ECMAScript 2017)

Works with promises because the "await" keyword will make all the function await an specific promise to fullfill, an then start running again. 

Example:

async function nameOfTheFunction(){
  await function1(); //takes 2 seconds - and returns a promise
  function2(); //this will await the function 1 to fullfill.
}

-----------------------------

You can use async functions with anonymous and arrows funtions too:

async function(){
  await function1();
  function2();
}

async ()=> {
  await function1();
  function2();
}

-----------------------------------------------------------------------------------------------------------------------------

The main point of Async Await is to substitue the ".then()/.catch":

This:

myFunction().then(anotherFunc).catch()

is the same as this:

async execMyFunc(){
  await myFunction();
  anotherFunc();
}


- The difference is that is cleaner, and you can do more things with it.
- If your promises calls "reject()", the async await will throw an error.

-----------------------------------------------------------------------------------------------------------------------------

You can chain promises way cleanear:

async function doThis(){
  let value1 = await promise1; //if the resolve returned a value, it would be assigned to "value1"
  let value2 = await value1; //if value1 returned a promise too
  let value3 = await value2; //and so on
  console.log(value3);
}


-----------------------------------------------------------------------------------------------------------------------------

The "await" keyword just works inside async functions!

-----------------------------------------------------------------------------------------------------------------------------

When you return something from an Async Function, it's going to be a promise. So if you return a value, you need to add a ".then(value => value)" to get this value outside the function.

-----------------------------------------------------------------------------------------------------------------------------

More resources:
https://javascript.info/async-await
https://www.youtube.com/watch?v=568g8hxJJp4
https://www.youtube.com/watch?v=XO77Fib9tSI
https://www.youtube.com/watch?v=chavThlNz3s
